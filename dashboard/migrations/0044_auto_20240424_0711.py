# Generated by Django 3.2.10 on 2024-04-24 07:11

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('dashboard', '0043_auto_20240424_0603'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='addtailors',
            options={'permissions': [('can_view_tailors', 'Can view tailors'), ('can_add_tailors', 'Can add tailors'), ('can_change_tailors', 'Can change tailors'), ('can_delete_tailors', 'Can delete tailors')], 'verbose_name': 'Tailors'},
        ),
        migrations.AlterModelOptions(
            name='admin_login',
            options={'permissions': [('can_view_admin', 'Can view admin'), ('can_add_admin', 'Can add admin'), ('can_change_admin', 'Can change admin'), ('can_delete_admin', 'Can delete admin')]},
        ),
        migrations.AlterModelOptions(
            name='reception_login',
            options={'permissions': [('can_view_reception', 'Can view reception'), ('can_add_reception', 'Can add reception'), ('can_change_reception', 'Can change reception'), ('can_delete_reception', 'Can delete reception')]},
        ),
        migrations.AlterModelManagers(
            name='admin_login',
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AlterModelManagers(
            name='reception_login',
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.RemoveField(
            model_name='addtailors',
            name='groups',
        ),
        migrations.RemoveField(
            model_name='addtailors',
            name='user_permissions',
        ),
        migrations.RemoveField(
            model_name='reception_login',
            name='user_name',
        ),
        migrations.AddField(
            model_name='admin_login',
            name='date_joined',
            field=models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined'),
        ),
        migrations.AddField(
            model_name='admin_login',
            name='email',
            field=models.EmailField(blank=True, max_length=254, verbose_name='email address'),
        ),
        migrations.AddField(
            model_name='admin_login',
            name='first_name',
            field=models.CharField(blank=True, max_length=150, verbose_name='first name'),
        ),
        migrations.AddField(
            model_name='admin_login',
            name='groups',
            field=models.ManyToManyField(blank=True, related_name='admin_login_groups', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='admin_login',
            name='is_active',
            field=models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active'),
        ),
        migrations.AddField(
            model_name='admin_login',
            name='is_staff',
            field=models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status'),
        ),
        migrations.AddField(
            model_name='admin_login',
            name='is_superuser',
            field=models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status'),
        ),
        migrations.AddField(
            model_name='admin_login',
            name='last_login',
            field=models.DateTimeField(blank=True, null=True, verbose_name='last login'),
        ),
        migrations.AddField(
            model_name='admin_login',
            name='last_name',
            field=models.CharField(blank=True, max_length=150, verbose_name='last name'),
        ),
        migrations.AddField(
            model_name='admin_login',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, related_name='admin_login_user_permissions', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='reception_login',
            name='date_joined',
            field=models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined'),
        ),
        migrations.AddField(
            model_name='reception_login',
            name='email',
            field=models.EmailField(blank=True, max_length=254, verbose_name='email address'),
        ),
        migrations.AddField(
            model_name='reception_login',
            name='first_name',
            field=models.CharField(blank=True, max_length=150, verbose_name='first name'),
        ),
        migrations.AddField(
            model_name='reception_login',
            name='groups',
            field=models.ManyToManyField(blank=True, related_name='reception_login_groups', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='reception_login',
            name='is_active',
            field=models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active'),
        ),
        migrations.AddField(
            model_name='reception_login',
            name='is_staff',
            field=models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status'),
        ),
        migrations.AddField(
            model_name='reception_login',
            name='is_superuser',
            field=models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status'),
        ),
        migrations.AddField(
            model_name='reception_login',
            name='last_login',
            field=models.DateTimeField(blank=True, null=True, verbose_name='last login'),
        ),
        migrations.AddField(
            model_name='reception_login',
            name='last_name',
            field=models.CharField(blank=True, max_length=150, verbose_name='last name'),
        ),
        migrations.AddField(
            model_name='reception_login',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, related_name='reception_login_user_permissions', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='reception_login',
            name='username',
            field=models.CharField(default='default_user', error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username'),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='admin_login',
            name='password',
            field=models.CharField(default='default_password', max_length=128, verbose_name='password'),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='admin_login',
            name='username',
            field=models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username'),
        ),
        migrations.AlterField(
            model_name='reception_login',
            name='password',
            field=models.CharField(max_length=128, verbose_name='password'),
        ),
    ]
